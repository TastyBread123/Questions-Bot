from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from database.models import User, Answer, Contest
from aiogram.filters import CommandStart
from aiogram.filters.command import CommandObject

from handlers.keyboards import START_KB, BACK_TO_MAIN_MENU
from utils.states import IDContest
from handlers.commands.play_contest.id_enter import enter_id_handler

router = Router()

@router.message(CommandStart(deep_link=True))
async def start_cmd_deep(message: types.Message, state: FSMContext, command: CommandObject):
    args = command.args

    await state.clear()
    user = (await User.get_or_create(id=message.from_user.id))[0]
    answers = await Answer.filter(creator=user).all()
    if len(answers) > 0:
        await Answer.filter(creator=user).all().delete()

    user.current_contest = None
    await user.save()
    
    contest = await Contest.get_or_none(id=args)
    if contest is None:
        return await message.reply("‚õîÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=BACK_TO_MAIN_MENU)
    
    await state.set_state(IDContest.ENTER_ID)
    return await enter_id_handler(message=message, state=state, payload_start=args)


@router.message(CommandStart(ignore_case=True))
@router.callback_query(F.data == 'to_main_menu')
async def start_cmd(message: types.Message | types.CallbackQuery, state: FSMContext):
    await state.clear()

    user = (await User.get_or_create(id=message.from_user.id))[0]
    answers = await Answer.filter(creator=user).all()
    if len(answers) > 0:
        await Answer.filter(creator=user).all().delete()

    user.current_contest = None
    await user.save()
    
    text = "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—ã –º–æ–∂–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å–Ω–∏–∑—É. –£–¥–∞—á–∏!"
    if isinstance(message, types.CallbackQuery):
        return await message.message.edit_text(text, reply_markup=START_KB, parse_mode='HTML')

    return await message.answer(text, reply_markup=START_KB, parse_mode='HTML')
