from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from database.models import Contest, Question
from handlers.keyboards import add_qustions_kb, add_variants_kb, right_variant_kb
from utils.states import CreateContest, AddQuestion
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


router = Router()

@router.message(CreateContest.ADD_QUESTIONS)
async def add_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = await Question.filter(contest_id=int(data['contest_id'])).all()
    if len(questions) >= 10:
        return await message.answer('‚ö†Ô∏è –í –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ –î–∞–ª—å—à–µ"')

    title = message.text.strip()
    if len(title) > 24:
        return await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 24 —Å–∏–º–≤–æ–ª–æ–≤!")
    
    data.update({'title': title})
    await state.set_data(data)
    await message.answer("üí• –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:")
    return await state.set_state(AddQuestion.CHOOSE_DESCRIPTION)


@router.message(AddQuestion.CHOOSE_DESCRIPTION)
async def question_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) > 300:
        return await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª–æ–≤!")
    
    data = await state.get_data()
    contest = await Contest.get(id=data['contest_id'])
    question = await Question.create(contest=contest, title=data['title'], description=description)
    await question.save()

    variant_message = await message.answer(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\nüìî –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n üí• –í–≤–æ–¥–∏—Ç–µ —Å–Ω–∏–∑—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–º–∞–∫—Å 8), –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
    await state.set_data({'contest_id': data['contest_id'], 'question_id': question.id, 'variant_message': variant_message, 'questions_message': data['questions_message'], 'variants': []})
    return await state.set_state(AddQuestion.ADD_VARIANTS)


@router.message(AddQuestion.ADD_VARIANTS)
async def question_variants(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if len(data['variants']) >= 8:
        return await message.answer('‚ö†Ô∏è –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚úÖ –î–∞–ª—å—à–µ"')

    variant = message.text.strip()
    if len(variant) > 24:
        return await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 24 —Å–∏–º–≤–æ–ª–æ–≤")
    
    if variant in data['variants']:
        return await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")

    data['variants'].append(variant)
    await state.set_data(data)

    kb = await add_variants_kb(data['question_id'], data['variants'])
    await data['variant_message'].edit_reply_markup(reply_markup=kb)
    
    return await message.reply(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@router.callback_query(AddQuestion.ADD_VARIANTS, F.data.startswith('delvariant_'))
async def del_variant_callback(call: types.CallbackQuery, state: FSMContext):
    _, question_id, variant_id = call.data.split("_")
    
    data = await state.get_data()
    data['variants'].pop(int(variant_id))
    await state.set_data(data)

    kb = await add_variants_kb(question_id, data['variants'])
    await call.message.edit_reply_markup(reply_markup=kb)


@router.callback_query(AddQuestion.ADD_VARIANTS, F.data.startswith("finish_variant_"))
async def finish_variants_create_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if len(data['variants']) <= 0:
        return await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!", show_alert=True)

    question_id = int(call.data.strip("finish_variant_"))
    question = await Question.get(id=question_id)
    question.variants = data['variants']
    await question.save()

    await state.set_state(AddQuestion.CHOOSE_RIGHT)
    kb = await right_variant_kb(question_id)
    return await call.message.edit_text("üèÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤–µ—Ä–Ω—ã–º (–º–∞–∫—Å 1)", reply_markup=kb)


@router.callback_query(AddQuestion.CHOOSE_RIGHT, F.data.startswith("rightvariant_"))
async def right_variant_callback(call: types.CallbackQuery, state: FSMContext):
    _, question_id, variant_id = call.data.split("_")
    question = await Question.get(id=int(question_id))
    question.right_variant = int(variant_id)
    await question.save()
    
    await state.set_state(AddQuestion.FINISH)
    variants = question.variants
    variants[question.right_variant] = f'‚úÖ {variants[question.right_variant]}'
    variant_text = "\n".join(variants)

    FINISH_KB = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data=f'finish_question_setting_{question_id}')]])
    return await call.message.edit_text(text=f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: {question.title}\nüìñ –û–ø–∏—Å–∞–Ω–∏–µ: {question.description}\n\nüéì –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{variant_text}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=FINISH_KB)


@router.callback_query(AddQuestion.FINISH, F.data.startswith("finish_question_setting_"))
async def finish_question_setting_callback(call: types.CallbackQuery, state: FSMContext):
    # question_id = int(call.data.strip('finish_question_setting_'))

    await state.set_state(CreateContest.ADD_QUESTIONS)
    data = await state.get_data()
    await data['questions_message'].delete()
    
    kb = await add_qustions_kb(data['contest_id'])
    questions_message = await call.message.answer(text=data['questions_message'].text, reply_markup=kb)
    await state.set_data({'contest_id': data['contest_id'], 'questions_message': questions_message})
    return await call.message.delete()
