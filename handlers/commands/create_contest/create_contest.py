from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link

from database.models import Contest, User
from utils.states import CreateContest
from utils.keyboards import CANCEL_KB, START_KB, FINISH_CREATE_CONTEST_KB, SKIP_DOP_TEXT_CREATE, add_qustions_kb, results_kb

router = Router()

@router.callback_query(F.data.startswith("contests_create"))
async def contests_create_callback(call: types.CallbackQuery, state: FSMContext):
    if await state.get_state() != None:
        return await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É", show_alert=True)
    
    await call.answer()
    await User.get_or_create(id=call.from_user.id)
    await call.message.edit_text("üí• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:", reply_markup=CANCEL_KB)
    return await state.set_state(CreateContest.CHOOSE_TITLE)


@router.callback_query(CreateContest.CHOOSE_TITLE, F.data.startswith("cancel"))
async def cancel_create_contest_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    return await call.message.edit_text(text="üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—ã –º–æ–∂–µ—à—å –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —Å–Ω–∏–∑—É. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!", reply_markup=START_KB)


@router.message(CreateContest.CHOOSE_TITLE)
async def choose_title_create_contest(message: types.Message, state: FSMContext):
    title = message.text.strip()
    if len(title) > 32:
        return await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤")
    
    await state.set_data({"title": title})
    await message.answer("üí• –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
    return await state.set_state(CreateContest.CHOOSE_DESCRIPTION)


@router.message(CreateContest.CHOOSE_DESCRIPTION)
async def choose_description_create_contest(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) > 300:
        return await message.answer("‚ö†Ô∏è –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª–æ–≤")
    
    info = await state.get_data()
    await state.clear()
    await state.set_state(CreateContest.ADD_QUESTIONS)
    
    creator = await User.get(id=message.from_user.id)
    contest = await Contest.create(creator=creator, title=info['title'], description=description)
    await contest.save()
    
    questions_message = await message.answer(f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {info['title']}\nüìî –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n‚ùì –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è")
    await state.set_data({'contest_id': contest.id, 'questions_message': questions_message})


@router.callback_query(CreateContest.ADD_QUESTIONS, F.data.startswith("finish_questions_"))
async def finish_questions_calback(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(CreateContest.FINISH_ADD_QUESTIONS)
    return await call.message.edit_text("üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?", reply_markup=FINISH_CREATE_CONTEST_KB)


@router.callback_query(CreateContest.FINISH_ADD_QUESTIONS, F.data.__eq__("cancel_finish_create_contest"))
async def cancel_finish_create_contest_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(CreateContest.ADD_QUESTIONS)

    kb = await add_qustions_kb(data['contest_id'])
    questions_message = await call.message.edit_text(text=data['questions_message'].text, reply_markup=kb)
    return await state.set_data({'contest_id': data['contest_id'], 'questions_message': questions_message})


@router.callback_query(CreateContest.FINISH_ADD_QUESTIONS, F.data.__eq__("finish_create_contest"))
async def finish_create_questions_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message = await call.message.edit_text("üìö –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è - —Ä–µ—É–∑–ª—å—Ç–∞—Ç\n–ü—Ä–∏–º–µ—Ä: 55 - –º–æ–ª–æ–¥–µ—Ü, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!\n\n‚ùóÔ∏è –ï—Å–ª–∏ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ", reply_markup=SKIP_DOP_TEXT_CREATE)
    data.update({'dop_texts': {}, 'results_message': message})

    await state.set_data(data)
    return await state.set_state(CreateContest.ADD_DOP_TEXT)


@router.callback_query(CreateContest.ADD_DOP_TEXT, F.data.__eq__("skip_dop_text"))
async def skip_dop_text_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    contest = await Contest.get(id=data['contest_id'])
    contest.dop_texts = {'-1': '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ!'}
    await contest.save()
    await state.set_state(CreateContest.FINISH)
    return await call.message.edit_text("üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?", reply_markup=FINISH_CREATE_CONTEST_KB)


@router.message(CreateContest.ADD_DOP_TEXT)
async def add_dop_text_handler(message: types.Message, state: FSMContext):
    result = message.text.strip().split("-", maxsplit=1)
    if len(result) != 2:
        return await message.reply("‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é–∑–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è - —Ä–µ—É–∑–ª—å—Ç–∞—Ç\n–ü—Ä–∏–º–µ—Ä: 55 - –º–æ–ª–æ–¥–µ—Ü, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!")

    percent = result[0].strip()
    if not percent.isdigit() or int(percent) < 0:
        return await message.reply("‚ö†Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–∏–º –∏–ª–∏ —Ä–∞–≤–Ω—ã–º 0")

    text = result[1].strip()
    if len(text) > 500 or len(text) <= 0:
        return await message.reply("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ 1 —Å–∏–º–≤–æ–ª–∞")
    
    data = await state.get_data()
    data['dop_texts'].update({percent: text})

    kb = await results_kb(data['contest_id'], data['dop_texts'])
    results_message = await message.answer(data['results_message'].text, reply_markup=kb)
    await data['results_message'].delete()
    data['results_message'] = results_message
    return await state.set_data(data)


@router.callback_query(CreateContest.ADD_DOP_TEXT, F.data.startswith('delete_result_'))
async def delete_result_create_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    var = call.data.strip('delete_result_')

    data['dop_texts'].pop(var)
    await state.set_data(data)

    kb = await results_kb(data['contest_id'], data['dop_texts'])
    return await call.message.edit_reply_markup(reply_markup=kb)


@router.callback_query(CreateContest.ADD_DOP_TEXT, F.data.startswith("finish_results_"))
async def finish_results_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    contest_id = int(call.data.strip("finish_results_"))
    contest = await Contest.get(id=contest_id)
    contest.dop_texts = data['dop_texts']
    await contest.save()

    await state.set_state(CreateContest.FINISH)
    return await call.message.edit_text("üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?", reply_markup=FINISH_CREATE_CONTEST_KB)


@router.callback_query(CreateContest.FINISH, F.data.__eq__("cancel_finish_create_contest"))
async def cancel_finish_create_contest_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    kb = SKIP_DOP_TEXT_CREATE
    if len(data['dop_texts']) > 0:
        kb = await results_kb(data['contest_id'], data['dop_texts'])

    results_message = await call.message.edit_text(text=data['results_message'].text, reply_markup=kb)
    data.update({'results_message': results_message})
    await state.set_data(data)
    return await state.set_state(CreateContest.ADD_DOP_TEXT)


@router.callback_query(CreateContest.FINISH, F.data.__eq__("finish_create_contest"))
async def finish_create_contest_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    contest = await Contest.get(id=int(data['contest_id']))
    contest.active = True
    await contest.save()
    await state.clear()

    link = await create_start_link(call.bot, contest.id)
    return await call.message.edit_text(f'üòè –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É "{contest.title}" (ID {contest.id})\nüí¨ –°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π: {link}', reply_markup=None)
